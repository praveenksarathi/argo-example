apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: combined-
spec:
  entrypoint: combined-example
  volumes:
  - name: my-secret-vol
    secret:
      secretName: my-k8s-secret
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: [ "ReadWriteMany" ]
      resources:
        requests:
          storage: 1Gi     
  onExit : exit-handler
  arguments:
    parameters:
    - name: should-print
      value: "false"
    - name: input-value
      value: 10
    - name: enable-timeout
      value: false
    - name: enable-volume
      value: false


  templates:
  - name: combined-example
    inputs:
      parameters:
      - name: should-print
      - name: input-value
      - name: enable-timeout
      - name: enable-volume

    steps:
    - - name: create-file
        template: create
        when: "({{inputs.parameters.input-value}} == 12) && ({{inputs.parameters.enable-volume}} == true)"
    - - name: read-file
        template: read
        when: "({{inputs.parameters.input-value}} == 12) && ({{inputs.parameters.enable-volume}} == true)"

    - - name: check-secret
        template: secret-check
        when: "({{inputs.parameters.input-value}} == 14) && ({{inputs.parameters.enable-volume}} == true)"

    - - name: test-equals
        template: equals-conditional
        when: "{{inputs.parameters.should-print}} == true"

    - - name: test-not-equals
        template: is-not-equals
        when: "{{inputs.parameters.should-print}} != false"

    - - name: and-check
        template: and-conditional
        when: "({{inputs.parameters.should-print}} == true) && ({{inputs.parameters.input-value}} == 10)"

    - - name: or-check
        template: or-conditional
        when: "({{inputs.parameters.should-print}} == true) || ({{inputs.parameters.input-value}} > 10)"

    - - name: greater-check
        template: range-conditional-greater
        when: "{{inputs.parameters.input-value}} > 10"

    - - name: lesser-check
        template: range-conditional-lesser
        when: "{{inputs.parameters.input-value}} < 10"

    - - name: timeout-check
        template: timeout-initializer
        when: "{{inputs.parameters.enable-timeout}} == true"

    - - name: volume-mount-check
        template: timeout-initializer
        when: "{{inputs.parameters.enable-timeout}} == true"

    - - name: event-looping-list
        template: loopsay
        arguments:
          parameters:
          - name: message
            value: "{{item}}"
        withItems:
        - Welcome
        - to
        - Narnia

    - - name: event-looping-map
        template: loopsay-map
        arguments:
          parameters:
          - name: firstname
            value: "{{item.firstname}}"
          - name: lastname
            value: "{{item.lastname}}"
        withItems:
        - { firstname: 'Praveen' , lastname: 'Kumar'}
        - { firstname: 'Tom' , lastname: 'Cruise'}
        - { firstname: 'Ashish' , lastname: 'Karki'}
        - { firstname: 'Prateek' , lastname: 'Gupta'}

    - - name: flip-a-coin
        template: flip-a-coin
        when: "{{inputs.parameters.input-value}} == 11"

    - - name: recursive-check
        template: check-heads
        when: "{{steps.flip-a-coin.outputs.result}} == heads"
      - name: flip-again
        template: flip-a-coin
        when: "{{steps.flip-a-coin.outputs.result}} == tails"

  - name: timeout-initializer
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo sleeping for 1m; sleep 60; echo done"]
    activeDeadlineSeconds: 10
  - name: create
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo generating message in volume; cowsay hello world | tee /mnt/vol/hello_world.txt"]
      volumeMounts:
      - name: workdir
        mountPath: /mnt/vol
  - name: read
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo getting message from volume; find /mnt/vol; cat /mnt/vol/hello_world.txt"]
      volumeMounts:
      - name: workdir
        mountPath: /mnt/vol
  - name: flip-a-coin
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import random
        result = "heads" if random.randint(0,1) == 0 else "tails"
        print(result)
  - name: check-heads
    container:
      image: alpine:3.6
      command: [sh, -c]
      args: ["echo \"it was heads\""]
  - name: is-not-equals
    container:
      image: docker/whalesay:latest
      command: [sh, -c]
      args: ["cowsay no the data are not equal"]

  - name: equals-conditional
    container:
      image: docker/whalesay:latest
      command: [sh, -c]
      args: ["cowsay the values are equal"]

  - name: or-conditional
    container:
      image: docker/whalesay:latest
      command: [sh, -c]
      args: ["cowsay either of the conditions got met"]
  - name: and-conditional
    container:
      image: docker/whalesay:latest
      command: [sh, -c]
      args: ["cowsay all the conditions met"]
  - name: range-conditional-greater
    container:
      image: docker/whalesay:latest
      command: [sh, -c]
      args: ["cowsay entered value is greater than prescribed condition"]
  - name: range-conditional-lesser
    container:
      image: docker/whalesay:latest
      command: [sh, -c]
      args: ["cowsay entered value is lesser than prescribed condition"]
  - name: loopsay
    inputs:
      parameters:
      - name: message
    container:
      image: docker/whalesay:latest
      command: [cowsay]
      args: ["{{inputs.parameters.message}}"]
  - name: loopsay-map
    inputs:
      parameters:
      - name: firstname
      - name: lastname
    container:
      image: docker/whalesay:latest
      command: [cowsay]
      args: ["Welcome Mr.{{inputs.parameters.firstname}} {{inputs.parameters.lastname}}"]
  - name: secret-check
    container:
      image: alpine:3.6
      command: [sh, -c]
      args: ["echo The Secret was  $MYSECRETPASSWORD"]
      env:
      - name: MYSECRETPASSWORD  
        valueFrom:
          secretKeyRef:
            name: my-secret     
            key: mypassword     
      volumeMounts:
      - name: my-secret-vol 
        mountPath: "/secret/mountpath"

  - name: exit-handler
    steps:
    - - name: notify
        template: send-email
      - name: celebrate
        template: celebrate
        when: "{{workflow.status}} == Succeeded"
      - name: cry
        template: cry
        when: "{{workflow.status}} != Succeeded"
  - name: send-email
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo send e-mail: {{workflow.name}} {{workflow.status}}"]
  - name: celebrate
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo hooray!"]
  - name: cry
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo boohoo!"]
